#!/Library/Frameworks/Python.framework/Versions/3.7/bin/python3

import sys
import json
import struct
import subprocess

try:
    # Python 3.x version
    # Read a message from stdin and decode it.
    def getMessage():
        rawLength = sys.stdin.buffer.read(4)
        if len(rawLength) == 0:
            sys.exit(0)
        messageLength = struct.unpack('@I', rawLength)[0]
        message = sys.stdin.buffer.read(messageLength).decode('utf-8')
        return json.loads(message)

    # Encode a message for transmission,
    # given its content.
    def encodeMessage(messageContent):
        encodedContent = json.dumps(messageContent).encode('utf-8')
        encodedLength = struct.pack('@I', len(encodedContent))
        return {'length': encodedLength, 'content': encodedContent}

    # Send an encoded message to stdout
    def sendMessage(encodedMessage):
        sys.stdout.buffer.write(encodedMessage['length'])
        sys.stdout.buffer.write(encodedMessage['content'])
        sys.stdout.buffer.flush()

    #Query and Start Alice
    def aliceRun():
        alice = subprocess.run(["sh","ali.sh"], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if alice.stdout.rstrip() == '':
            aliceRun()
        return 'avk:'+alice.stdout.rstrip()
    #Query and Start Bob
    def bobRun():
        bob = subprocess.run(["sh","bob.sh"], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if bob.stdout.rstrip() == '':
            bobRun()
        return bob.stdout.rstrip()
    while True:
        receivedMessage = getMessage()
        if receivedMessage == "ping":
            try:
                #alice = subprocess.run('nohup nucypher alice run --dev --federated-only --teacher-uri 52.14.207.225:9151 > alice.log &',cwd="/Volumes/StoreEx/elvi.network/nucypher/",universal_newlines=True, shell=True,stderr=subprocess.PIPE)
                #a = subprocess.run('cat alice.log | grep "Alice Verifying"',cwd="/Volumes/StoreEx/elvi.network/nucypher/nuhack/",universal_newlines=True, shell=True)
                #sendMessage(encodeMessage('Alice Running'))
                #alice = subprocess.run(["sh","ali.sh"], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                opA = aliceRun()
                opB = bobRun()
                B = opA+",bvk:"+opB.split(',')[0]+",bek:"+ opB.split(',')[1]
                sendMessage(encodeMessage(B))
            except FileNotFoundError as e:
                sendMessage(encodeMessage('error file not found'))

        else :
            try:
                #alice = subprocess.run('nohup nucypher alice run --dev --federated-only --teacher-uri 52.14.207.225:9151 > alice.log &',cwd="/Volumes/StoreEx/elvi.network/nucypher/",universal_newlines=True, shell=True,stderr=subprocess.PIPE)
                #a = subprocess.run('cat alice.log | grep "Alice Verifying"',cwd="/Volumes/StoreEx/elvi.network/nucypher/nuhack/",universal_newlines=True, shell=True)
                sendMessage(encodeMessage(receivedMessage.split( )[1]))
                enrico = subprocess.run(["sh","enrico.sh",receivedMessage.split( )[0],receivedMessage.split( )[1]], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                sendMessage(encodeMessage(enrico.stdout))
            except FileNotFoundError as e:
                sendMessage(encodeMessage('error file not found'))

except AttributeError:
    # Python 2.x version (if sys.stdin.buffer is not defined)
    # Read a message from stdin and decode it.
    def getMessage():
        rawLength = sys.stdin.read(4)
        if len(rawLength) == 0:
            sys.exit(0)
        messageLength = struct.unpack('@I', rawLength)[0]
        message = sys.stdin.read(messageLength)
        return json.loads(message)

    # Encode a message for transmission,
    # given its content.
    def encodeMessage(messageContent):
        encodedContent = json.dumps(messageContent)
        encodedLength = struct.pack('@I', len(encodedContent))
        return {'length': encodedLength, 'content': encodedContent}

    # Send an encoded message to stdout
    def sendMessage(encodedMessage):
        sys.stdout.write(encodedMessage['length'])
        sys.stdout.write(encodedMessage['content'])
        sys.stdout.flush()

    while True:
        receivedMessage = getMessage()
        if receivedMessage == "ping":
            sendMessage(encodeMessage("pong2"))
        sendMessage(encodeMessage(receivedMessage))
